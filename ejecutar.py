#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EJECUTOR PRINCIPAL
An√°lisis de G√©nero y Desarrollo Econ√≥mico

Este script ejecuta el an√°lisis completo de manera simplificada,
verificando previamente que todo est√© configurado correctamente.
"""

import sys
import os
import time
from datetime import datetime

def mostrar_banner():
    """Muestra el banner inicial"""
    print("\n" + "="*80)
    print("üöÄ AN√ÅLISIS AVANZADO DE G√âNERO Y DESARROLLO ECON√ìMICO")
    print("="*80)
    print("üìä An√°lisis para pa√≠ses de renta baja y media-baja")
    print("üî¨ T√©cnicas: Correlaciones, Clustering, Machine Learning")
    print("üìà Resultados: Dashboards interactivos y reportes detallados")
    print("="*80)
    print(f"‚è∞ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def verificar_python():
    """Verifica la versi√≥n de Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå ERROR: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {sys.version}")
        return False
    return True

def verificar_dependencias():
    """Verifica que las dependencias est√©n instaladas"""
    print("üîç Verificando dependencias...")
    
    dependencias_criticas = [
        ("pandas", "an√°lisis de datos"),
        ("numpy", "c√°lculos num√©ricos"),
        ("matplotlib", "gr√°ficos b√°sicos"),
        ("plotly", "visualizaciones interactivas"),
        ("sklearn", "machine learning")
    ]
    
    faltantes = []
    
    for modulo, descripcion in dependencias_criticas:
        try:
            __import__(modulo)
            print(f"‚úì {modulo} - {descripcion}")
        except ImportError:
            print(f"‚ùå {modulo} - {descripcion} (FALTANTE)")
            faltantes.append(modulo)
    
    if faltantes:
        print(f"\n‚ö†Ô∏è Faltan {len(faltantes)} dependencias cr√≠ticas:")
        for modulo in faltantes:
            print(f"   - {modulo}")
        print("\nüí° Soluci√≥n: Ejecuta primero 'python instalar_dependencias.py'")
        return False
    
    print("‚úì Todas las dependencias est√°n disponibles")
    return True

def verificar_archivos_datos():
    """Verifica que los archivos de datos est√©n disponibles"""
    print("\nüìÅ Verificando archivos de datos...")
    
    archivos_datos = [
        ("DATA_GHAB.xlsx", "archivo principal Excel"),
        ("paste.txt", "archivo alternativo texto")
    ]
    
    archivos_encontrados = []
    
    for archivo, descripcion in archivos_datos:
        if os.path.exists(archivo):
            size_mb = os.path.getsize(archivo) / (1024 * 1024)
            print(f"‚úì {archivo} - {descripcion} ({size_mb:.1f} MB)")
            archivos_encontrados.append(archivo)
        else:
            print(f"‚ùå {archivo} - {descripcion} (NO ENCONTRADO)")
    
    if not archivos_encontrados:
        print("\n‚ö†Ô∏è No se encontraron archivos de datos")
        print("üí° Coloca uno de estos archivos en la carpeta:")
        print("   - DATA_GHAB.xlsx (formato Excel)")
        print("   - paste.txt (formato texto separado por tabs)")
        return False
    
    print(f"‚úì Archivos de datos disponibles: {len(archivos_encontrados)}")
    return True

def verificar_estructura_proyecto():
    """Verifica/crea la estructura del proyecto"""
    print("\nüìÇ Verificando estructura del proyecto...")
    
    directorios_necesarios = [
        "resultados",
        "resultados/dashboards",
        "resultados/reportes"
    ]
    
    for directorio in directorios_necesarios:
        if not os.path.exists(directorio):
            try:
                os.makedirs(directorio, exist_ok=True)
                print(f"‚úì Creado: {directorio}/")
            except Exception as e:
                print(f"‚ùå Error creando {directorio}: {e}")
                return False
        else:
            print(f"‚úì Existe: {directorio}/")
    
    return True

def verificar_archivo_analisis():
    """Verifica que el archivo de an√°lisis principal est√© disponible"""
    print("\nüìÑ Verificando archivo de an√°lisis...")
    
    if not os.path.exists("analisis_principal.py"):
        print("‚ùå Archivo 'analisis_principal.py' no encontrado")
        print("üí° Aseg√∫rate de tener todos los archivos del proyecto")
        return False
    
    print("‚úì Archivo de an√°lisis principal disponible")
    return True

def estimar_tiempo_ejecucion():
    """Estima el tiempo de ejecuci√≥n basado en los datos"""
    print("\n‚è±Ô∏è Estimando tiempo de ejecuci√≥n...")
    
    # Factores que afectan el tiempo
    factores = []
    
    # Tama√±o de archivos
    for archivo in ["DATA_GHAB.xlsx", "paste.txt"]:
        if os.path.exists(archivo):
            size_mb = os.path.getsize(archivo) / (1024 * 1024)
            if size_mb > 5:  # Archivo grande
                factores.append("archivo_grande")
            break
    
    # N√∫mero estimado de variables (estimaci√≥n por tama√±o)
    tiempo_estimado = 2  # Base: 2 minutos
    
    if "archivo_grande" in factores:
        tiempo_estimado += 2
    
    print(f"üïí Tiempo estimado: {tiempo_estimado}-{tiempo_estimado + 2} minutos")
    print("   (Depende de la velocidad de tu computadora)")
    
    return tiempo_estimado

def ejecutar_analisis():
    """Ejecuta el an√°lisis principal"""
    print("\n" + "üöÄ INICIANDO AN√ÅLISIS PRINCIPAL")
    print("="*50)
    
    try:
        # Importar y ejecutar el analizador
        from analisis_principal import AnalizadorGeneroDesarrollo
        
        print("üìä Creando instancia del analizador...")
        analizador = AnalizadorGeneroDesarrollo()
        
        print("üîÑ Ejecutando an√°lisis completo...")
        tiempo_inicio = time.time()
        
        exito = analizador.ejecutar_analisis_completo()
        
        tiempo_total = time.time() - tiempo_inicio
        
        if exito:
            print(f"\nüéâ AN√ÅLISIS COMPLETADO EXITOSAMENTE!")
            print(f"‚è±Ô∏è Tiempo total: {tiempo_total/60:.1f} minutos")
            return True
        else:
            print(f"\n‚ùå El an√°lisis termin√≥ con errores")
            print(f"‚è±Ô∏è Tiempo transcurrido: {tiempo_total/60:.1f} minutos")
            return False
            
    except ImportError as e:
        print(f"‚ùå Error importando el analizador: {e}")
        print("üí° Verifica que 'analisis_principal.py' est√© en la carpeta")
        return False
    except Exception as e:
        print(f"‚ùå Error durante el an√°lisis: {e}")
        return False

def mostrar_resultados():
    """Muestra informaci√≥n sobre los resultados generados"""
    print("\n" + "="*60)
    print("üìä RESULTADOS GENERADOS")
    print("="*60)
    
    # Verificar archivos generados
    archivos_dashboards = [
        ("descriptivo_dashboard.html", "Estad√≠sticas descriptivas"),
        ("top_correlaciones.html", "Variables m√°s correlacionadas"),
        ("clusters_pca.html", "Agrupaci√≥n de pa√≠ses"),
        ("comparacion_modelos_ml.html", "Modelos de Machine Learning")
    ]
    
    archivos_reportes = [
        ("estadisticas_descriptivas.csv", "Estad√≠sticas de variables"),
        ("tabla_correlaciones.csv", "Todas las correlaciones"),
        ("perfiles_clusters.csv", "Perfiles de clusters"),
        ("resumen_ejecutivo.txt", "Resumen del an√°lisis")
    ]
    
    print("üìà DASHBOARDS INTERACTIVOS (HTML):")
    dashboards_encontrados = 0
    for archivo, descripcion in archivos_dashboards:
        ruta_completa = os.path.join("resultados", "dashboards", archivo)
        if os.path.exists(ruta_completa):
            print(f"‚úì {archivo} - {descripcion}")
            dashboards_encontrados += 1
        else:
            print(f"‚ö™ {archivo} - {descripcion} (no generado)")
    
    print(f"\nüìã REPORTES DE DATOS (CSV/TXT):")
    reportes_encontrados = 0
    for archivo, descripcion in archivos_reportes:
        ruta_completa = os.path.join("resultados", "reportes", archivo)
        if os.path.exists(ruta_completa):
            size_kb = os.path.getsize(ruta_completa) / 1024
            print(f"‚úì {archivo} - {descripcion} ({size_kb:.1f} KB)")
            reportes_encontrados += 1
        else:
            print(f"‚ö™ {archivo} - {descripcion} (no generado)")
    
    print(f"\nüìä RESUMEN:")
    print(f"   Dashboards generados: {dashboards_encontrados}/{len(archivos_dashboards)}")
    print(f"   Reportes generados: {reportes_encontrados}/{len(archivos_reportes)}")
    
    if dashboards_encontrados > 0:
        print(f"\nüåê C√ìMO VER LOS RESULTADOS:")
        print(f"   1. Navega a la carpeta 'resultados/dashboards/'")
        print(f"   2. Haz doble clic en los archivos .html")
        print(f"   3. Se abrir√°n en tu navegador web")
        print(f"   4. Los gr√°ficos son interactivos (puedes hacer zoom, filtrar, etc.)")
    
    if reportes_encontrados > 0:
        print(f"\nüìÑ REPORTES DE DATOS:")
        print(f"   - Los archivos .csv se pueden abrir en Excel")
        print(f"   - El archivo .txt contiene el resumen ejecutivo")

def main():
    """Funci√≥n principal del ejecutor"""
    
    try:
        # Banner inicial
        mostrar_banner()
        
        # 1. Verificaciones previas
        print("üîç VERIFICACIONES PREVIAS")
        print("-" * 30)
        
        if not verificar_python():
            input("\nPresiona Enter para salir...")
            return 1
        
        if not verificar_dependencias():
            input("\nPresiona Enter para salir...")
            return 1
        
        if not verificar_archivos_datos():
            input("\nPresiona Enter para salir...")
            return 1
        
        if not verificar_estructura_proyecto():
            input("\nPresiona Enter para salir...")
            return 1
        
        if not verificar_archivo_analisis():
            input("\nPresiona Enter para salir...")
            return 1
        
        # 2. Estimaci√≥n de tiempo
        tiempo_estimado = estimar_tiempo_ejecucion()
        
        # 3. Confirmaci√≥n del usuario
        print(f"\n‚úÖ Todas las verificaciones pasaron correctamente")
        print(f"üéØ Listo para ejecutar el an√°lisis completo")
        
        respuesta = input(f"\n¬øDeseas continuar? (s/n): ").lower().strip()
        if respuesta not in ['s', 'si', 's√≠', 'y', 'yes']:
            print("‚ùå An√°lisis cancelado por el usuario")
            return 0
        
        # 4. Ejecutar an√°lisis
        exito = ejecutar_analisis()
        
        # 5. Mostrar resultados
        if exito:
            mostrar_resultados()
            
            print(f"\nüéä ¬°PROCESO COMPLETADO CON √âXITO!")
            print(f"üìÅ Revisa la carpeta 'resultados/' para ver todos los archivos")
            print(f"üåü ¬°Disfruta explorando tus insights sobre g√©nero y desarrollo!")
            
            return 0
        else:
            print(f"\n‚ùå El an√°lisis no se complet√≥ correctamente")
            print(f"üí° Revisa los mensajes de error anteriores")
            print(f"üîß Puede que necesites reinstalar dependencias")
            
            return 1
    
    except KeyboardInterrupt:
        print(f"\n\n‚èπÔ∏è An√°lisis interrumpido por el usuario")
        return 1
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        return 1
    finally:
        print(f"\n‚è∞ Finalizado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        input("\nPresiona Enter para salir...")

if __name__ == "__main__":
    sys.exit(main())